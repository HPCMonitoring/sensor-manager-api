// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_URL")
  relationMode = "foreignKeys"
}

model User {
  id       String @id @default(cuid())
  email    String @unique @db.VarChar(50)
  password String

  // Currently, not bind resource to a specific user
  // clusters       Cluster[]
  // FilterTemplate FilterTemplate[]
  // KafkaBroker    KafkaBroker[]
}

model Cluster {
  id      String   @id @default(cuid())
  name    String   @unique
  remarks String?
  sensors Sensor[]
}

model Sensor {
  id            String              @id @default(cuid())
  ipAddr        String
  name          String              @db.VarChar(50)
  kernelName    String              @db.VarChar(100)
  kernelVersion String              @db.VarChar(50)
  arch          String              @db.VarChar(25)
  hostname      String              @db.VarChar(100)
  rootUser      String              @db.VarChar(50)
  remarks       String?
  // status        SensorStatus   @default(REQUESTED)
  cluster       Cluster             @relation(fields: [clusterId], references: [id], onDelete: Cascade)
  clusterId     String
  topicConfigs  SensorTopicConfig[]

  @@unique([clusterId, name])
}

model KafkaBroker {
  id         String       @id @default(cuid())
  url        String       @unique
  name       String       @unique
  KafkaTopic KafkaTopic[]
}

model KafkaTopic {
  id            String              @id @default(cuid())
  name          String
  broker        KafkaBroker         @relation(fields: [brokerId], references: [id])
  brokerId      String
  sensorConfigs SensorTopicConfig[]

  @@unique([brokerId, name])
}

model SensorTopicConfig {
  id               String          @id @default(cuid())
  sensor           Sensor          @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  kafkaTopic       KafkaTopic      @relation(fields: [kafkaTopicId], references: [id], onDelete: Cascade)
  interval         Float
  script           String
  sensorId         String
  kafkaTopicId     String
  usingTemplate    FilterTemplate? @relation(fields: [filterTemplateId], references: [id])
  filterTemplateId String?

  @@unique([sensorId, kafkaTopicId])
}

model FilterTemplate {
  id           String              @id @default(cuid())
  name         String
  remarks      String?
  script       String
  interval     Float
  SensorConfig SensorTopicConfig[]
}

// enum SensorStatus {
//   RUNNING // Sensor is connecting to server, and doing it jobs
//   STOPPED // Sensor is connecting to server, and not doing anythings
//   REQUESTED // Sensor registered with server, and waiting to be accepted
//   DISCONNECTED // Sensor lost connection with server
// }
