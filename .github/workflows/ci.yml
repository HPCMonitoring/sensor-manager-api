name: CI

on:
  pull_request:
    branches: ["master"]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # Image name MUST have a pattern like <org_name_lowercase>/<repo_name_lowercase>
  IMAGE_NAME: hpcmonitoring/sensor-manager-api
  IMAGE_TAG: 0.1.0
  ORG_USERNAME: hpcmonitoring
  POSTGRES_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@sensormanagerdb:5432/${{ secrets.POSTGRES_DB }}?schema=public

permissions:
  packages: write

jobs:
  build-and-test:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Checkout repository
        
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Set up env file
        run: |
          echo > .env.production
          echo POSTGRES_URL=${{ env.POSTGRES_URL }} > .env.production
          echo COOKIE_SECRET=${{ secrets.COOKIE_SECRET }} >> .env.production
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env.production
          echo CORS_WHITE_LIST=${{ vars.CORS_WHITE_LIST }} >> .env.production

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.9.1

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.ORG_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
